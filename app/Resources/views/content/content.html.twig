{% extends 'base.html.twig' %}
{% block body %}
    {{ parent() }}
    <div id="video" class="centered_video"></div>
    {% if data is defined %}
        {{ dump(data) }}
    {% endif %}
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .centered_video  {
            padding: 5%;
            background: #AAAAAA;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('https://bitmovin-a.akamaihd.net/bitdash/latest/bitdash.min.js') }}"></script>
    <script src="{{ asset('js/bdplayer.js') }}"></script>
    <script src="{{ asset('js/VideoMetricsStruct.js') }}"></script>
    <script src="{{ asset('js/fingerprint.js' )}}"></script>
    <script src="{{ asset('js/util.js') }}"></script>
    <script src="{{ asset('js/bootstrap-slider.js') }}"></script>

    <script>
        var count = '{{ contents|length }}';
        var evalContents = {};
        var evalContentMetrics = {};
        var metrics = new Metrics();

        {% for content in contents %}

        evalContents['{{ content.name }}'] = {
            id:                 '{{ content.id }}',
            name:               '{{ content.name }}',
            path:               '{{ content.path }}',
            ordinance:          '{{ content.ordinance }}',
            playbackOffset:     '{{ content.playbackOffset }}',
            playbackDuration:   '{{ content.playbackDuration }}',
            ratingTime:         '{{ content.ratingTime }}',
            ratingLowerBound:   '{{ content.ratingLowerBound }}',
            ratingUpperBound:   '{{ content.ratingUpperBound }}'
        };
        {% endfor %}

        var paused = false;
        var pausedTime = 0;
        var stalled = false;
        var stalledTime = 0;

        /* log browser focus */
        window.onfocus = function(){
            metrics.incBFChange();
        }
        window.onblur = function(){
            metrics.incBFChange();
        }

        /* disable context menu (right mouse click) */
        document.oncontextmenu = document.body.oncontextmenu = function() {return false;}

        var loopcount = 0;
        var contentLoop = function(contents) {
            var currentContent = contents[Object.keys(contents)[loopcount]];
            playUntil(currentContent, function() {
                saveMetrics(currentContent);
//                for (var prop in metrics) { if (metrics.hasOwnProperty(prop)) { metrics[prop] = ""; } }
                loopcount++;
                metrics.reset();
                if(loopcount < Object.keys(contents).length) {
                    showSlider(currentContent);
                    setTimeout(contentLoop, 5000, contents);
                }else{
                    showSlider(currentContent);
                    setTimeout(function() {
                        window.location.replace(window.location.origin + "/evaluation/" + {{ evalId }} + "/postQuestions");
                    }, 5000);
                }
            });
        }

        function playUntil(content,mediaEnded) {
            metrics.startupTimeBegin = Date.now();
            metrics.setFullscreen(isFullscreen());
            metrics.setFingerprint(new Fingerprint().get());
            setupBDPlayer(content.path, content.playbackOffset, content.playbackDuration, mediaEnded)
        }

        function saveMetrics(content) {
            evalContentMetrics = null;
            evalContentMetrics = {
                fullscreen:             metrics.getFullscreen(),
                playerType:             metrics.getPlayerType(),
                bfchange:               metrics.getBFChange(),
                fingerprint:            metrics.getFingerprint(),
                buffer:                 genCSV(metrics.getBufferLevels(), ";"),
                guessedBw:              genCSV(metrics.getGuessedBw(), ";"),
                representationBitrate:  genCSV(metrics.getRepresentationBw(), ";"),
                videoTimes:             genCSV(metrics.getVideoTime(), ";"),
                startupTime:            metrics.getStartupTime(),
                pauses:                 genCSV(metrics.getPauses(), ";"),
                stalls:                 genCSV(metrics.getStalls(), ";"),
                userRating:             metrics.getuserRating()
            }

            var metricsUrl = window.location.origin + "/evaluation/" + {{ evalId }}+ "/content/" + content.id;

            $.ajax(
                    {	url: metricsUrl,
                        method:'POST',
                        dataType: 'json',
                        data: JSON.stringify(evalContentMetrics)
                    })
                    .done(function(data)
                    {
                        console.log("Storing metrics...");
//                        console.log(data);
                    })
                    .fail(function(data)
                    {
                        console.log("problems handling metrics result...");
//                        console.log(data);
                    });
        }

        function showSlider() {
            $("#video").slider({
                min: '0',
                max: '10'
            });
        }

     /*   function sleep (time) {
            return new Promise((resolve) => setTimeout(resolve, time));
        }*/

        contentLoop(evalContents);

    </script>
{% endblock %}


{#
{

var metricsUrl = window.location.origin + "/evaluation/storeMetrics";

$.ajax(
{	url: metricsUrl,
method:'POST',
dataType: 'JSON',
data: evalContentMetrics
})
.done(function(/*args vom server*/)
{
console.log("Storing metrics...");
})
.fail(function(/*args vom server*/)
{
console.log("problems handling metrics result...");
});
//                    window.location.replace(window.location.origin + "/evaluation/storeMetrics");
}#}


{#
var formName = '{{ form.vars.name }}';
document.getElementById(formName.concat("_result")).value = evalContentMetrics;
document.getElementById('content_results_form').submit();#}
