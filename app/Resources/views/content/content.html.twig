{% extends 'base.html.twig' %}
{% block body %}
    {{ parent() }}

    <div id="video" class="centered_video"></div>

    <div id="qoeSlider" class="centerFlex" style="display: none">
        <div class="row">
            <h3>Please rate the previous video:</h3>
            <div class="row">
                <input id="ex1" data-slider-id='ex1Slider' type="text"/>
            </div>
        </div>

    </div>

    {% if data is defined %}
        {{ dump(data) }}
    {% endif %}
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/bootstrap-slider.css') }}" />
    <style>
        .centered_video  {
            padding: 5%;
            background: #AAAAAA;
        }

        .centerFlex {
            align-items: center;
            display: flex;
            justify-content: center;
        }
        
        #ex1Slider .slider-selection {
            background: #BABABA;
        }
        .slider.slider-horizontal {
            width: 100%;
            height: 20px;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('https://bitmovin-a.akamaihd.net/bitdash/latest/bitdash.min.js') }}"></script>
    <script src="{{ asset('js/bdplayer.js') }}"></script>
    <script src="{{ asset('js/VideoMetricsStruct.js') }}"></script>
    <script src="{{ asset('js/fingerprint.js' )}}"></script>
    <script src="{{ asset('js/util.js') }}"></script>
    <script src="{{ asset('js/bootstrap-slider.js') }}"></script>

    <script>

        var count = '{{ contents|length }}';
        var evalContents = {};
        var evalContentMetrics = {};
        var metrics = new Metrics();

        {% for content in contents %}

        evalContents['{{ content.name }}'] = {
            id:                 '{{ content.id }}',
            name:               '{{ content.name }}',
            path:               '{{ content.path }}',
            ordinance:          '{{ content.ordinance }}',
            playbackOffset:     '{{ content.playbackOffset }}',
            playbackDuration:   '{{ content.playbackDuration }}',
            ratingTime:         '{{ content.ratingTime }}',
            ratingLowerBound:   '{{ content.ratingLowerBound }}',
            ratingUpperBound:   '{{ content.ratingUpperBound }}'
        };
        {% endfor %}

        var paused = false;
        var pausedTime = 0;
        var stalled = false;
        var stalledTime = 0;

        /* log browser focus */
        window.onfocus = function(){
            metrics.incBFChange();
        }
        window.onblur = function(){
            metrics.incBFChange();
        }

        /* disable context menu (right mouse click) */
        document.oncontextmenu = document.body.oncontextmenu = function() {return false;}

        var loopcount = 0;
        var totalContentCount = Object.keys(evalContents).length;

        function contentLoop() {
            var currentContent = evalContents[Object.keys(evalContents)[loopcount]];
            playUntil(currentContent,showSlider, mediaEnded);
        }

        function playUntil(content, showSlider, mediaEnded) {
            metrics.startupTimeBegin = Date.now();
            metrics.setFullscreen(isFullscreen());
            metrics.setFingerprint(new Fingerprint().get());
            setupBDPlayer(content, showSlider, mediaEnded)
        }

        function mediaEnded(content) {
            saveMetrics(content);
            loopcount++;
            $("#qoeSlider").hide();
            $("#ex1").slider('destroy');
            metrics.reset();
            if(loopcount < totalContentCount) {
                contentLoop();
            }else{
                window.location.replace(window.location.origin + "/evaluation/" + {{ evalId }} + "/postQuestions");
            }
        }

        function saveMetrics(content) {
            evalContentMetrics = null;
            evalContentMetrics = {
                fullscreen:             metrics.getFullscreen(),
                playerType:             metrics.getPlayerType(),
                bfchange:               metrics.getBFChange(),
                fingerprint:            metrics.getFingerprint(),
                buffer:                 genCSV(metrics.getBufferLevels(), ";"),
                guessedBw:              genCSV(metrics.getGuessedBw(), ";"),
                representationBitrate:  genCSV(metrics.getRepresentationBw(), ";"),
                videoTimes:             genCSV(metrics.getVideoTime(), ";"),
                startupTime:            metrics.getStartupTime(),
                pauses:                 genCSV(metrics.getPauses(), ";"),
                stalls:                 genCSV(metrics.getStalls(), ";"),
                userRating:             $("#ex1").slider('getValue')
        }

            var metricsUrl = window.location.origin + "/evaluation/" + {{ evalId }}+ "/content/" + content.id;

            $.ajax(
                    {	url: metricsUrl,
                        method:'POST',
                        dataType: 'json',
                        data: JSON.stringify(evalContentMetrics)
                    })
                    .done(function(data)
                    {
                        console.log("Storing metrics...");
//                        console.log(data);
                    })
                    .fail(function(data)
                    {
                        console.log("problems handling metrics result...");
//                        console.log(data);
                    });
        }

        function showSlider(content, mediaEnded) {

            $("#video").hide();
            $("#qoeSlider").show();

            $('#ex1').attr({
                "data-slider-min"   : content.ratingLowerBound,
                "data-slider-max"   : content.ratingUpperBound
            });

            $('#ex1').slider();

            setTimeout(mediaEnded,(content.ratingTime * 1000), content);
        }

        contentLoop();

    </script>
{% endblock %}



